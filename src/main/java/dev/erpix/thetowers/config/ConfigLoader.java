package dev.erpix.thetowers.config;

import org.bukkit.plugin.Plugin;
import org.jetbrains.annotations.NotNull;
import org.yaml.snakeyaml.LoaderOptions;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import org.yaml.snakeyaml.introspector.Property;
import org.yaml.snakeyaml.introspector.PropertyUtils;

import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Path;

/**
 * Utility class for loading the configuration.
 */
public class ConfigLoader {

    /**
     * Loads the configuration from the plugin's data folder.
     *
     * @param plugin the plugin instance from which to load the configuration.
     * @return the loaded configuration.
     */
    public static @NotNull Config load(Plugin plugin) {
        Path dataPath = plugin.getDataPath();
        if (!Files.exists(dataPath)) {
            plugin.saveDefaultConfig();
        }
        Path configPath = dataPath.resolve("config.yml");

        try (Reader reader = new FileReader(configPath.toFile())) {
            Constructor constructor = new Constructor(Config.class, new LoaderOptions());
            constructor.setPropertyUtils(new CamelCasePropertyUtils());
            Yaml yaml = new Yaml(constructor);

            return yaml.loadAs(reader, Config.class);
        } catch (IOException e) {
            throw new ConfigLoadException("Failed to load configuration file.", e);
        }
    }

    /**
     * Custom PropertyUtils to convert underscore names to camelCase.
     * Generated by Copilot, because I was too lazy to write it myself.
     */
    private static class CamelCasePropertyUtils extends PropertyUtils {
        @Override
        public Property getProperty(Class<?> type, String name) {
            try {
                // First, try with the given name.
                return super.getProperty(type, name);
            } catch (Exception e) {
                // If not found, convert the name from underscore to camelCase and try again.
                String camelCaseName = underscoreToCamelCase(name);
                return super.getProperty(type, camelCaseName);
            }
        }

        private String underscoreToCamelCase(String name) {
            StringBuilder result = new StringBuilder();
            boolean nextUpper = false;
            for (char c : name.toCharArray()) {
                if (c == '_') {
                    nextUpper = true;
                } else {
                    result.append(nextUpper ? Character.toUpperCase(c) : c);
                    nextUpper = false;
                }
            }
            return result.toString();
        }
    }

}
